#! /usr/bin/node
  // vim: set ft=javascript:

  var http = require('http');
  var path = require('path');
  var fs   = require('fs');
  var io   = require('socket.io');
  var proc = require('child_process');
  var server = http.createServer(httpHandler);
  var ioserv = io.listen(server);
  var spawn = proc.spawn;
  var exec  = proc.exec;
  var socket;

  function httpHandler(req, res) {
    switch(req.method)
    {
      case 'GET': 
        console.log('received GET');

        console.log('	in dir' + __dirname);
        console.log('	for url' + req.url);

        var filePath = __dirname + req.url;
        if (filePath == __dirname + '/') {
          filePath = __dirname + '/index.html';
        }
        console.log('	resolved filepath to ' + filePath);
        var contentType;
        switch (path.extname(filePath)) {
          case '.js':
            contentType = 'text/javascript';
            break;
          case '.css':
            contentType = 'text/css';
            break;
          default:
            contentType = 'text/html';
            break;
        }
        console.log('	setting content type: ' + contentType);
        
        fs.exists(filePath, function(exists) { 
          if (exists) {
            fs.readFile(filePath, function(error, content) {
              if (error) {
                res.writeHead(500);
                res.end();
                console.log('	cannot read file! sending 500');
              }
              else {
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(content, 'utf-8');
                console.log('	file sent');
              }
            });
          }
          else {
            res.writeHead(404);
            res.end();
            console.log('	file not found!');
          }
        });
        break;

      case 'PUT':
        console.log('received PUT');

        var gfm = spawn('pandoc', 
            [ '-t'
            , 'html5'
            , '--smart'
            , '--bibliography=default.bib'
            , '--csl=csl/association-for-computing-machinery'
            , '--mathjax'
            ]);

        var newHTML = '';
        var input_encoded = '';

        req.on('data', function(chunk) {
          input_encoded += chunk;
        });
        req.on('end', function() {
          var input_decoded = new Buffer(input_encoded, 'base64').toString('utf8');
          gfm.stdin.write(input_decoded);
          gfm.stdin.end();
          res.writeHead(200);
          res.end();
        });

        gfm.stdout.on('data', function(data) {
          newHTML += data;
        });
        gfm.on('exit', function(ecode) {
          socket.emit('newContent', newHTML);
        });
        break;

    case 'DELETE':
      console.log('received DELETE');
      socket.emit('die');
      process.exit()
    default:
  }
}

ioserv.sockets.on('connection', function(sock) {
  socket = sock;
  console.log('connection established!')
});

server.listen(8080);
console.log('server running at http://localhost:8080/');
